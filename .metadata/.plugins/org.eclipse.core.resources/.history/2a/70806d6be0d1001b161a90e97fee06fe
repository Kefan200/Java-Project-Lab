//import java.awt.BorderLayout;
//import java.awt.GridLayout;
//import java.awt.event.ActionEvent;
//import java.awt.event.ActionListener;
//import java.awt.event.MouseAdapter;
//import java.awt.event.MouseEvent;
//import java.awt.event.MouseListener;
//import java.sql.PreparedStatement;
//import java.sql.ResultSet;
//import java.sql.SQLException;
//import java.text.DateFormat;
//import java.text.SimpleDateFormat;
//import java.util.Date;
//import java.util.Vector;
//
//import javax.swing.JButton;
//import javax.swing.JComboBox;
//import javax.swing.JInternalFrame;
//import javax.swing.JLabel;
//import javax.swing.JOptionPane;
//import javax.swing.JPanel;
//import javax.swing.JScrollPane;
//import javax.swing.JTable;
//import javax.swing.JTextField;
//import javax.swing.table.DefaultTableModel;
//
//
//
//public class Manager extends JInternalFrame implements MouseListener,ActionListener{
//
//	JPanel northPanel, southPanel,centerPanel;
//	JTable table;
//	DefaultTableModel dtm;
//	JScrollPane scrollpane;
//	JLabel productid, productquantity, productmethod,entermonth;
//	//buat isi text
//	JTextField productidField, productquantityField,entermonthField;
//	JButton insertButton, updateButton, deleteButton,entermonthButton;
//	Vector<Object>rowData;
//	String method[]= {"Credit", "Cash"};
//	JComboBox productmethodbox=new JComboBox(method);
//	Connect con;
//	Date transactiondate=new Date();
//	public Manager() {
//		
////		con=new Connect();
//		//Initialize component
//		northPanel = new JPanel();
//		southPanel = new JPanel();
//		centerPanel= new JPanel(new GridLayout(4,2));
//		
//		entermonth=new JLabel("Enter month");
//		productid = new JLabel("ID");
//		productquantity = new JLabel("Quantity");
//		productmethod = new JLabel("Method");
//	
//		entermonthField=new JTextField();
//		productidField=new JTextField();
//		productquantityField=new JTextField();
//		productmethodbox.setBounds(50, 50, 90, 20);
//		
//		entermonthButton=new JButton("Enter month");
//		insertButton=new JButton("Insert");
//		updateButton=new JButton("Update");
//		deleteButton=new JButton("Delete");
//		
//		//ActionListener biar tombolnya bisa dipencet
//		entermonthButton.addActionListener(this);
//		insertButton.addActionListener(this);
//		updateButton.addActionListener(this);
//		deleteButton.addActionListener(this);
//		
//		centerPanel.add(entermonth);
//		centerPanel.add(entermonthField);
//		
//		centerPanel.add(productid);
//		centerPanel.add(productidField);
//		
//		centerPanel.add(productquantity);
//		centerPanel.add(productquantityField);
//		
//		centerPanel.add(productmethod);
//		centerPanel.add(productmethodbox);
//		
//		southPanel.add(entermonthButton);
//		southPanel.add(insertButton);
//		southPanel.add(updateButton);
//		southPanel.add(deleteButton);
//
//		table = new JTable(dtm);
//		refreshTable();
//		
//		table.addMouseListener(new MouseAdapter() {
//			 public void mouseClicked(MouseEvent e) {
//				 System.out.println("Table clicked");
//				 entermonth.setText(table.getValueAt(table.getSelectedRow(), 0).toString());
//				 productid.setText(table.getValueAt(table.getSelectedRow(), 1).toString());
//				 productquantity.setText(table.getValueAt(table.getSelectedRow(), 2).toString());
//				 productmethod.setText(table.getValueAt(table.getSelectedRow(), 3).toString());
//			 }
//		});
//		
//		scrollpane = new JScrollPane(table);
//		
////		dtm.addRow(newData);
////		dtm.insertRow(0, newData2);
//		
//		northPanel.add(scrollpane);
//		
////		southPanel.add(id);
////		southPanel.add(name);
////		southPanel.add(type);
////		southPanel.add(cuisine);
//		
//		this.setLayout(new BorderLayout());
//		
//		this.add(northPanel, BorderLayout.NORTH);
//		this.add(southPanel, BorderLayout.SOUTH);
//		this.add(centerPanel, BorderLayout.CENTER);
//		
//		this.setClosable(true);
//		this.setTitle("Manager View");
//		this.setVisible(true);
//	}
//
//	private void refreshTable() {
//		Object[] column = {"ID", "Quantity", "Method","Date"};
//		
//		dtm=new DefaultTableModel(column,0);
//
//		Vector<MenuManager>menus=MenuControllerManager.getAllMenus();
//		
//		for(MenuManager menumanager: menus) {
//			rowData=new Vector<>();
//			rowData.add(menumanager.getId());
//			rowData.add(menumanager.getQuantity());
//			rowData.add(menumanager.getMethod());
//			rowData.add(menumanager.getDate());
//			dtm.addRow(rowData);
//		}
//		//tambahin dalam jtable
//		table.setModel(dtm);
//	}
////		con.rs=con.execQuery("SELECT * FROM transactionmanagement");
//		
////		try {
////			PreparedStatement ps=Connect.getInstance().prepareStatement("SELECT * FROM transactionmanagement");
////			ResultSet rs=ps.executeQuery();
////			//majuin cursor satu baris dari baris sebelumnya
////			while(rs.next()) {
////				rowData =new Vector<>(); 
////				
////				//Cara Pertama
//////				for (int i = 1; i <= con.rsx`m.getColumnCount(); i++) {
//////					rowData.add(con.rs.getObject(i));
//////				}
////				
////				//Cara Kedua
////				int id=rs.getInt("productid");
////				int quantity=rs.getInt("productquantity");
////				String method=rs.getString("productmethod");
////				String date=rs.getString("transactiondate");
////				rowData.add(id);
////				rowData.add(quantity);
////				rowData.add(method);
////				rowData.add(date);
////				dtm.addRow(rowData);
////			}
////		try {
////			
////			
////			
////		} catch (SQLException e1) {
////			// TODO Auto-generated catch block
////			e1.printStackTrace();
////		}
////	}
//
//	@Override
//	public void mouseClicked(MouseEvent e) {
//		// TODO Auto-generated method stub
//		
//	}
//
//	@Override
//	public void mousePressed(MouseEvent e) {
//		// TODO Auto-generated method stub
//		
//	}
//
//	@Override
//	public void mouseReleased(MouseEvent e) {
//		// TODO Auto-generated method stub
//		
//	}
//
//	@Override
//	public void mouseEntered(MouseEvent e) {
//		// TODO Auto-generated method stub
//		
//	}
//
//	@Override
//	public void mouseExited(MouseEvent e) {
//		// TODO Auto-generated method stub
//		
//	}
//
//	@Override
//	public void actionPerformed(ActionEvent e) {
//		// TODO Auto-generated method stub
//		if(e.getSource()==entermonthButton) {
//			String entermonth=entermonthField.getText();
//			boolean insertnewmonth=MenuControllerManager.entermonthMenu(entermonth);
//			if(insertnewmonth) {
//				Object[] column = {"ID", "Quantity", "Method","Date"};
//				
//				dtm=new DefaultTableModel(column,0);
//
//				Vector<MenuManager>menus=MenuControllerManager.getAllMenus();
//				
//				for(MenuManager menumanager: menus) {
//					rowData=new Vector<>();
//					rowData.add(menumanager.getId());
//					rowData.add(menumanager.getQuantity());
//					rowData.add(menumanager.getMethod());
//					rowData.add(menumanager.getDate());
//					dtm.addRow(rowData);
//				}
//				//tambahin dalam jtable
//				table.setModel(dtm);
//				entermonthField.setText("");
//				JOptionPane.showMessageDialog(null, "Inserted!");
//			}else {
//				String errorMessage=MenuControllerManager.errorMessage;
//				JOptionPane.showMessageDialog(null, errorMessage,"Error",JOptionPane.ERROR_MESSAGE);
//			}
//		}
//		if(e.getSource()==insertButton) {
//			String id=productidField.getText();
//			String quantity=productquantityField.getText();
//			String method=(String) productmethodbox.getItemAt(productmethodbox.getSelectedIndex());
////			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
////			String strDate = dateFormat.format(transactiondate);
//
//			boolean isInserted=MenuControllerManager.insertMenu(id,quantity,method);
//			if(isInserted) {
//				refreshTable();
//				productidField.setText("");
//				productquantityField.setText("");
//				JOptionPane.showMessageDialog(null, "Inserted!");
//			}else {
//				String errorMessage=MenuControllerManager.errorMessage;
//				JOptionPane.showMessageDialog(null, errorMessage,"Error",JOptionPane.ERROR_MESSAGE);
//			}
////			String id=productidField.getText();
////			STring quantity=productquantityField.getText();
////			String method=(String) productmethodbox.getItemAt(productmethodbox.getSelectedIndex());
////			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");  
////            String strDate = dateFormat.format(transactiondate);
////			//Date date=
//////			String query =String.format("INSERT INTO transactionmanagement VALUES(%d,%d,'%s','%s')",id,quantity,method,strDate);
////			
////			try {
////				PreparedStatement ps=Connect.getInstance().prepareStatement("INSERT INTO transactionmanagement "+"(id,quantity,method,strDate) VALUES (?,?,?,?)");
////				ps.setInt(1,id);
////				ps.setInt(2,quantity);
////				ps.setString(3,method);
////				ps.setString(4,strDate);
////				ps.executeUpdate();
////			} catch (SQLException e1) {
////				// TODO Auto-generated catch block
////				e1.printStackTrace();
////			}
////	
////			JOptionPane.showMessageDialog(null, "Inserted!");
////			refreshTable();
////			productidField.setText("");
////			productquantityField.setText("");
//			
//	//		employeestatusField.setText("");
//		}else if(e.getSource()==updateButton){
//			String id=productidField.getText();
//			String quantity=productquantityField.getText();
//			String method=(String) productmethodbox.getItemAt(productmethodbox.getSelectedIndex());
////			DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");  
////            String strDate = dateFormat.format(transactiondate);
//			//Date date=
////			String query =String.format("INSERT INTO transactionmanagement VALUES(%d,%d,'%s','%s')",id,quantity,method,strDate);
//
//			if(MenuControllerManager.updateMenu(id,quantity,method)) {
//				refreshTable();
//				productidField.setText("");
//				productquantityField.setText("");
//
//				JOptionPane.showMessageDialog(null, "Updated!");
//			}else {
//				String errorMessage=MenuControllerManager.errorMessage;
//				JOptionPane.showMessageDialog(null, errorMessage,"Error",JOptionPane.ERROR_MESSAGE);
//			}
////			try {
////				PreparedStatement ps=Connect.getInstance().prepareStatement("UPDATE employee\"+\"SET quantity=?,method=?,strDate=? WHERE id=?");
////				ps.setInt(1,id);
////				ps.setInt(2,quantity);
////				ps.setString(3,method);
////				ps.setString(4,strDate);
////				ps.executeUpdate();
////			} catch (SQLException e1) {
////				// TODO Auto-generated catch block
////				e1.printStackTrace();
////			}
//		}else if(e.getSource()==deleteButton) {
//			String id=productidField.getText();
//			int confirmDelete=JOptionPane.showConfirmDialog(null, "Are you sure to delete?");
//			if(confirmDelete!=JOptionPane.YES_OPTION) {
//				return;
//			}
//			if(MenuControllerManager.deleteMenu(id)){
//				refreshTable();
//				JOptionPane.showMessageDialog(null, "Deleted!");
//			}else {
//				String errorMessage=MenuControllerManager.errorMessage;
//				JOptionPane.showMessageDialog(null, errorMessage,"Error",JOptionPane.ERROR_MESSAGE);
//			}
//		}
//	}
//
//}
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class Manager extends JInternalFrame implements MouseListener,ActionListener{

	JPanel northPanel, southPanel,centerPanel;
	JTable table;
	DefaultTableModel dtm;
	JScrollPane scrollpane;
	JLabel employeeid, employeerole, employeename, employeeusername,employeestatus,employeesalary;
	//buat isi text
	JTextField employeeidField, employeeroleField,employeenameField,employeeusernameField,employeesalaryField,employeestatusField;
	JButton insertButton, updateButton, deleteButton;
	Vector<Object>rowData;
	String status[]= {"Active", "Not Active"};
//	JComboBox employeestatusbox=new JComboBox(status);

//	Connect con;
	
	public Manager() {
		
	//	con=new Connect();
		//Initialize component
		northPanel = new JPanel();
		southPanel = new JPanel();
		centerPanel= new JPanel(new GridLayout(6,2));
		
		employeeid = new JLabel("ID");
		employeerole = new JLabel("Role");
		employeename = new JLabel("Name");
		employeeusername = new JLabel("Username");
		employeestatus=new JLabel("Status");
		employeesalary=new JLabel("Salary");
		
		
		employeeidField=new JTextField();
		employeeroleField=new JTextField();
		employeenameField=new JTextField();
		employeeusernameField=new JTextField();
//		employeestatusbox.setBounds(50, 50,90,20);
		employeestatusField=new JTextField();
		employeesalaryField=new JTextField();
		
		insertButton=new JButton("Insert");
		updateButton=new JButton("Update");
		deleteButton=new JButton("Delete");
		
		//ActionListener biar tombolnya bisa dipencet
		insertButton.addActionListener(this);
		updateButton.addActionListener(this);
		deleteButton.addActionListener(this);
		
		centerPanel.add(employeeid);
		centerPanel.add(employeeidField);
		
		centerPanel.add(employeerole);
		centerPanel.add(employeeroleField);
		
		centerPanel.add(employeename);
		centerPanel.add(employeenameField);
		
		centerPanel.add(employeeusername);
		centerPanel.add(employeeusernameField);
		
		centerPanel.add(employeestatus);
//		centerPanel.add(employeestatusbox);
		centerPanel.add(employeestatusField);
		
		centerPanel.add(employeesalary);
		centerPanel.add(employeesalaryField);
		
		southPanel.add(insertButton);
		southPanel.add(updateButton);
		southPanel.add(deleteButton);

		table = new JTable(dtm);
		refreshTable();
		
		table.addMouseListener(new MouseAdapter() {
			 public void mouseClicked(MouseEvent e) {
				 System.out.println("Table clicked");
				 employeeid.setText(table.getValueAt(table.getSelectedRow(), 0).toString());
				 employeerole.setText(table.getValueAt(table.getSelectedRow(), 1).toString());
				 employeename.setText(table.getValueAt(table.getSelectedRow(), 2).toString());
				 employeeusername.setText(table.getValueAt(table.getSelectedRow(), 3).toString());
				 employeestatus.setText(table.getValueAt(table.getSelectedRow(), 4).toString());
				 employeesalary.setText(table.getValueAt(table.getSelectedRow(), 5).toString());
			 }
		});
		
		scrollpane = new JScrollPane(table);
		
//		dtm.addRow(newData);
//		dtm.insertRow(0, newData2);
		
		northPanel.add(scrollpane);
		
//		southPanel.add(id);
//		southPanel.add(name);
//		southPanel.add(type);
//		southPanel.add(cuisine);
		
		this.setLayout(new BorderLayout());
		
		this.add(northPanel, BorderLayout.NORTH);
		this.add(southPanel, BorderLayout.SOUTH);
		this.add(centerPanel, BorderLayout.CENTER);
		
		this.setClosable(true);
		this.setTitle("Human Resource Management View");
		this.setVisible(true);
	}

	private void refreshTable() {
		Object[] column = {"ID", "Role", "Name", "Username","Status","Salary","Password"};
		
		dtm=new DefaultTableModel(column,0);
		
		Vector<Menu> menus=MenuController.getAllMenus();
		
		for(Menu menu: menus) {
			rowData=new Vector<>();
			rowData.add(menu.getId());
			rowData.add(menu.getRole());
			rowData.add(menu.getName());
			rowData.add(menu.getUsername());
			rowData.add(menu.getStatus());
			rowData.add(menu.getSalary());
			rowData.add(menu.getPassword());
			dtm.addRow(rowData);
		}
		table.setModel(dtm);
	

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(e.getSource()==insertButton) {
			String role=employeeroleField.getText();
			String name=employeenameField.getText();
			String username=employeeusernameField.getText();
			String status=employeestatusField.getText();
//			String status=(String) employeestatusbox.getItemAt(employeestatusbox.getSelectedIndex());
			String salary=employeesalaryField.getText();
			boolean isInserted=MenuControllerManager.insertMenu(role, name, username, status, salary);
			if(isInserted) {
				refreshTable();
				
				employeeroleField.setText("");
				employeenameField.setText("");
				employeeusernameField.setText("");
				employeestatusField.setText("");
				employeesalaryField.setText("");
				JOptionPane.showMessageDialog(null, "Inserted!");
			}else {
				String errorMessage=MenuControllerManager.errorMessage;
				JOptionPane.showMessageDialog(null, errorMessage,"Error",JOptionPane.ERROR_MESSAGE);
			}
//			
//		//	String query =String.format("INSERT INTO employee VALUES(null,'%s','%s','%s','%s',%d)",role, name, username,status,salary);
//			try {
//				PreparedStatement ps=Connect.getInstance().prepareStatement("INSERT INTO employee "+"(role, name, username,status,salary) VALUES (?,?,?,?,?)");
//				ps.setString(1, role);
//				ps.setString(2, name);
//				ps.setString(3, username);
//				ps.setString(4, status);
//				ps.setInt(5, salary);
//				ps.executeUpdate();

//			} catch (SQLException e1) {
//				// TODO Auto-generated catch block
//				e1.printStackTrace();
//			}
////			con.execUpdate(query);

		}else if(e.getSource()==updateButton){
//			int id=Integer.parseInt(employeeidField.getText());
			String employeeid=employeeidField.getText();
			String role=employeeroleField.getText();
			String name=employeenameField.getText();
			String username=employeeusernameField.getText();
//			String status=(String) employeestatusbox.getItemAt(employeestatusbox.getSelectedIndex());
			String status=employeestatusField.getText();
			String salary=employeesalaryField.getText();
			
			if(MenuControllerManager.updateMenu(id, role, name, username, status, salary)) {
				refreshTable();
				
				employeeroleField.setText("");
				employeenameField.setText("");
				employeeusernameField.setText("");
				employeestatusField.setText("");
				employeesalaryField.setText("");
				JOptionPane.showMessageDialog(null, "Updated!");
			}else {
				String errorMessage=MenuControllerManager.errorMessage;
				JOptionPane.showMessageDialog(null, errorMessage,"Error",JOptionPane.ERROR_MESSAGE);
			}
	
		}else if(e.getSource()==deleteButton) {
//			int id=Integer.parseInt(employeeidField.getText());
			String id=employeeidField.getText();
			String status=employeestatusField.getText();
			int confirmDelete=JOptionPane.showConfirmDialog(null, "Are you sure to delete?");
			if(confirmDelete!=JOptionPane.YES_OPTION) {
				return;
			}
			if(MenuControllerManager.deleteMenu(id,status)){
				refreshTable();
				employeeroleField.setText("");
				employeenameField.setText("");
				employeeusernameField.setText("");
				employeestatusField.setText("");
				employeesalaryField.setText("");
				JOptionPane.showMessageDialog(null, "Deleted!");
			}else {
				String errorMessage=MenuControllerManager.errorMessage;
				JOptionPane.showMessageDialog(null, errorMessage,"Error",JOptionPane.ERROR_MESSAGE);
			}
//			try {
//				
//				

//			} catch (Exception e1) {
//				// TODO Auto-generated catch block
//				e1.printStackTrace();
//			}
		}
	}

}
